name: Commit Stage

on:
  push:
    branches:
      - 'feature/**'
  pull_request:
    branches:
      - 'feature/**'
  workflow_dispatch:

jobs:
  detect-changes:
    name: Detect Changed Services
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.detect.outputs.matrix }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed services
        id: detect
        run: |
          # Get list of changed files in the last commit or PR
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD)
          SERVICES=()

          # Check which services have changed
          if echo "$CHANGED_FILES" | grep -q '^patient-service/'; then
            SERVICES+=("{\"service\":\"patient-service\"}")
          fi
          if echo "$CHANGED_FILES" | grep -q '^appointment-service/'; then
            SERVICES+=("{\"service\":\"appointment-service\"}")
          fi
          if echo "$CHANGED_FILES" | grep -q '^dispatcher-service/'; then
            SERVICES+=("{\"service\":\"dispatcher-service\"}")
          fi
          if echo "$CHANGED_FILES" | grep -q '^provider-profile-service/'; then
            SERVICES+=("{\"service\":\"provider-profile-service\"}")
          fi
          if echo "$CHANGED_FILES" | grep -q '^gh-frontend/'; then
            SERVICES+=("{\"service\":\"gh-frontend\"}")
          fi

          # Create a JSON matrix for downstream jobs
          MATRIX="{\"include\": [${SERVICES[@]}]}"
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  build-and-test:
    needs: detect-changes
    if: ${{ contains(fromJson(needs.detect-changes.outputs.matrix).include[*].service, 'gh-frontend') == false }}
    strategy:
      matrix: ${{fromJson(needs.detect-changes.outputs.matrix)}}
    name: Build and Test ${{ matrix.service }}
    runs-on: ubuntu-latest
    environment: development
    permissions:
      contents: read
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          cache: gradle

      - name: Build, unit tests, and integration tests
        working-directory: ${{ matrix.service }}
        run: |
          chmod +x gradlew
          ./gradlew checkstyleMain --stacktrace || exit 1
          ./gradlew checkstyleTest --stacktrace || exit 1
          ./gradlew test --stacktrace || exit 1
          ./gradlew integrationTest --stacktrace || exit 1
          # ./gradlew jacocoTestReport --stacktrace || exit 1
          # ./gradlew jacocoTestCoverageVerification --stacktrace || exit 1
          ./gradlew spotbugsMain --stacktrace || exit 1
          ./gradlew spotbugsTest --stacktrace || exit 1

      - name: Upload Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-${{ matrix.service }}
          path: |
            ${{ matrix.service }}/build/reports/tests/test/
            ${{ matrix.service }}/build/reports/tests/integrationTest/
            ${{ matrix.service }}/build/reports/jacoco/test/html/
            ${{ matrix.service }}/build/reports/checkstyle/main.html
            ${{ matrix.service }}/build/reports/checkstyle/test.html
            ${{ matrix.service }}/build/reports/spotbugs/main.html
            ${{ matrix.service }}/build/reports/spotbugs/test.html
          retention-days: 1

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.service }}
          path: ${{ matrix.service }}/build/libs/
          retention-days: 1

  build-and-test-frontend:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: contains(fromJson(needs.detect-changes.outputs.matrix).include.*.service, 'gh-frontend')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        working-directory: gh-frontend
        run: npm install

      - name: Run TypeScript linting
        working-directory: gh-frontend
        run: npm run lint:ts

      - name: Run CSS linting
        working-directory: gh-frontend
        run: npm run lint:css

      - name: Run Dependencies check
        working-directory: gh-frontend
        run: npm run check:outdated

      - name: Run Jest unit tests
        working-directory: gh-frontend
        run: npm run test -- --watch=false --browsers=ChromeHeadlessCI --reporters=default --reporters=jest-junit
        env:
          JEST_JUNIT_OUTPUT_DIR: ./test-results/jest

      - name: Build Angular App
        working-directory: gh-frontend
        run: npm run build

      - name: Upload Jest test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jest-test-results-gh-frontend
          path: gh-frontend/test-results/jest/
          retention-days: 5

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-artifacts-gh-frontend
          path: gh-frontend/dist/gh-frontend/browser
          retention-days: 1

  security-scan:
    needs: [build-and-test, detect-changes, build-and-test-frontend]
    if: always()
    strategy:
      matrix: ${{fromJson(needs.detect-changes.outputs.matrix)}}
    name: Security Scan ${{ matrix.service || 'all' }}
    runs-on: ubuntu-latest
    environment: development
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Code vulnerability scanning
        uses: anchore/scan-action@v3
        id: scan
        with:
          path: "${{ github.workspace }}/${{ matrix.service }}"
          fail-build: false
          severity-cutoff: high
          output-format: sarif

      - name: Upload Anchore scan SARIF report
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}

      - name: Upload Security Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports-${{ matrix.service }}
          path: |
            ${{ steps.scan.outputs.sarif }}
            ${{ matrix.service }}/build/reports/dependency-check-report.html
          retention-days: 1

  report-upload:
    name: Upload Combined Reports
    needs: [security-scan, detect-changes]
    if: fromJson(needs.detect-changes.outputs.matrix).include[0]
    strategy:
      matrix: ${{fromJson(needs.detect-changes.outputs.matrix)}}
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: Download All Reports
        uses: actions/download-artifact@v4
        with:
          path: all-reports

      - name: Upload Combined Reports
        uses: actions/upload-artifact@v4
        with:
          name: artifact
          path: all-reports/${{ matrix.service }}
          retention-days: 7

  validate:
    name: Validate Kubernetes Manifests
    needs: detect-changes
    if: always()
    strategy:
      matrix: ${{fromJson(needs.detect-changes.outputs.matrix)}}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        run: echo "${{ github.token }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Create results directory
        run: mkdir -p validation-results

      - name: Validate Kubernetes manifests
        run: |
          docker run --rm \
            -v ${{ github.workspace }}/${{ matrix.service }}/k8s:/k8s \
            -v ${{ github.workspace }}/validation-results:/results \
            ghcr.io/yannh/kubeconform:latest \
            -summary -output json /k8s > validation-results/validation.json

      - name: Upload validation results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: k8s-validation-results-${{ matrix.service }}
          path: validation-results/validation.json
          retention-days: 7

  build-and-push:
    needs: [validate, detect-changes]
    if: fromJson(needs.detect-changes.outputs.matrix).include[0]
    strategy:
      matrix: ${{fromJson(needs.detect-changes.outputs.matrix)}}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate version tag
        id: version
        run: |
          echo "tag=dev" >> $GITHUB_OUTPUT

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/${{ matrix.service }}
          tags: |
            type=raw,value=${{ steps.version.outputs.tag }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service }}
          file: ${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}