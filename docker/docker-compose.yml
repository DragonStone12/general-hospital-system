services:
  patient-service:
    depends_on:
      patients-postgres:
        condition: service_healthy
      fluent-bit:
        condition: service_started
        required: true
      tempo:
        condition: service_started
        required: true
    build:
      context: ../patient-service
      dockerfile: Dockerfile
    container_name: patient-service
    ports:
      - "9010:9010"
      - "8010:8010"
      - "5005:5005"
    env_file:
      - .env
    environment:
      JAVA_TOOL_OPTIONS: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005"
      PATIENT_SERVICE_DB: ${PATIENT_SERVICE_DB}
      SPRING_DATASOURCE_URL: "jdbc:postgresql://${PATIENT_SERVICE_HOSTNAME}:5432/${PATIENT_SERVICE_DB}"
      SPRING_DATASOURCE_USERNAME: ${PATIENT_SERVICE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${PATIENT_SERVICE_PASSWORD}
      SHOULD_SHOW_SQL: ${SHOULD_SHOW_SQL}
      SPRING_PROFILES_ACTIVE: dev
    networks:
      - general-hospital-network
    logging:
      driver: fluentd
      options:
        fluentd-address: 127.0.0.1:24224

  appointment-service:
    container_name: appointment-service
    depends_on:
      appointments-mysql:
        condition: service_healthy
      fluent-bit:
        condition: service_started
        required: true
      tempo:
        condition: service_started
        required: true 
    build:
      context: ../appointment-service
      dockerfile: Dockerfile
    ports:
      - "9020:9020"
      - "8020:8020"
      - "5006:5006"
    env_file:
      - .env
    environment:
      JAVA_TOOL_OPTIONS: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5006"
      APPOINTMENT_SERVICE_DB: ${APPOINTMENT_SERVICE_DB}
      SPRING_R2DBC_URL: "r2dbc:mysql://${APPOINTMENT_SERVICE_HOSTNAME}:3306/${APPOINTMENT_SERVICE_DB}?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC"
      SPRING_R2DBC_USERNAME: ${APPOINTMENT_SERVICE_USERNAME}
      SPRING_R2DBC_PASSWORD: ${APPOINTMENT_SERVICE_PASSWORD}
      SHOULD_SHOW_SQL: ${SHOULD_SHOW_SQL}
      SPRING_PROFILES_ACTIVE: dev
    mem_limit: 512m    
    networks:
      - general-hospital-network
    logging:
      driver: fluentd
      options:
        fluentd-address: 127.0.0.1:24224

  dispatcher-service:
    container_name: dispatcher-service
    depends_on:
      kafka-broker:
        condition: service_healthy
      appointment-service:
        condition: service_started
      fluent-bit:
        condition: service_started
      tempo:
        condition: service_started
    build:
      context: ../dispatcher-service
      dockerfile: Dockerfile
    ports:
      - "9030:9030"
      - "8030:8030"
      - "5007:5007"
    env_file:
      - .env
    environment:
      JAVA_TOOL_OPTIONS: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5007"
      KAFKA_BROKERS: ${KAFKA_BROKERS}
      SPRING_PROFILES_ACTIVE: dev
    mem_limit: 512m  
    networks:
      - general-hospital-network
    logging:
      driver: fluentd
      options:
        fluentd-address: 127.0.0.1:24224     
  
  patients-postgres:
    container_name: patients-postgres
    image: postgres:16.1
    mem_limit: 512m
    restart: unless-stopped
    volumes:
      - patients-db-data:/var/lib/postgresql/data
      - patients-db-conf:/etc/postgresql
    networks:
      - general-hospital-network
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${PATIENT_SERVICE_USERNAME}
      POSTGRES_PASSWORD: ${PATIENT_SERVICE_PASSWORD}
      POSTGRES_DB: ${PATIENT_SERVICE_DB}
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d ${PATIENT_SERVICE_DB} -U ${PATIENT_SERVICE_USERNAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s

  appointments-mysql:
    container_name: appointments-mysql
    image: mysql:8
    mem_limit: 512m
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${APPOINTMENT_SERVICE_DB}
      MYSQL_ROOT_PASSWORD: ${APPOINTMENT_SERVICE_PASSWORD}
    ports:
      - '3306:3306'
    volumes:
      - appointments-db:/var/lib/mysql
      - appointments-db-conf:/etc/mysql
    networks:
      - general-hospital-network
    env_file:
      - .env
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u${APPOINTMENT_SERVICE_USERNAME}", "-p${APPOINTMENT_SERVICE_PASSWORD}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s

  grafana:
    image: grafana/grafana-oss:10.4.3
    container_name: grafana
    depends_on:
      - loki
      - prometheus
      - tempo
    ports:
      - "3000:3000"
    env_file:
      - .env
    environment:
      GF_SECURITY_ADMIN_USER: ${GF_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GF_PASSWORD}
    volumes:
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/grafana.ini:/etc/grafana/grafana.ini

  loki:
    image: grafana/loki:2.9.8
    container_name: loki
    depends_on:
      - fluent-bit
    ports:
      - "3100:3100"

  fluent-bit:
    image: grafana/fluent-bit-plugin-loki:2.9.8
    container_name: fluent-bit
    ports:
      - "24224:24224"
    environment:
      LOKI_URL: http://loki:3100/loki/api/v1/push
    volumes:
      - ./monitoring/fluent_bit/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf

  prometheus:
    image: quay.io/prometheus/prometheus:v2.52.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  tempo:
    image: grafana/tempo:2.5.0
    container_name: tempo
    command: -config.file=/etc/tempo-config.yml
    ports:
      - "3110:3100"
      - "4317:4317"
    volumes:
      - ./monitoring/tempo/tempo.yml:/etc/tempo-config.yml

  kafka-broker:   
    image: confluentinc/cp-kafka:latest
    hostname: broker
    container_name: kafka-broker
    ports:
      - "9092:9092"
    networks:
      - general-hospital-network
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker:29093
      KAFKA_LISTENERS: PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk  
    healthcheck:
      test: |
        bash -c '
        echo "Starting health check..."
        /usr/bin/kafka-topics --bootstrap-server broker:29092 --list > /dev/null 2>&1
        if [ $$? -eq 0 ]; then
          echo "Health check passed"
          exit 0
        else
          echo "Health check failed"
          exit 1
        fi'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s    

volumes:
  patients-db-data:
    driver: local
  patients-db-conf:
    driver: local
  appointments-db:
    driver: local
  appointments-db-conf:
    driver: local

networks:
  general-hospital-network:
    name: general-hospital-network